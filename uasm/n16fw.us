// EN_MDR may be redundant
//
//   oooooo ttt sss aaaa  iiiiiiiiiiiiiiii
//
//
//   oooo oott tsss aaaa  iiii iiii iiii iiii
// b 1100 0000 0000 0001  0000 0000 0000 0010
// h    c    0    0    1     0    0    0    2
//
//   c001 0002
//
//

<0x00>
@Init:
@InstNoop:
@Fetch:
    EN_IR, EN_PC_0, RAM_LD, EN_PC_0; // init and noop



//
//  ALU Register Transfer Instructions
//
<0xa0>
@InstALURegisterLoLoTransfer:
    EN_INST_FORM_0, INST_FORM_0_SRC,
    RU_SEL_RS, RU_SEL_RT, RU_EN_RT,
    SEL_ALU,
    EN_IR, EN_PC_0, EN_MDR, RAM_LD;

<0xa4>
@InstALURegisterLoHiTransfer:
    RU_SEL_RS, RU_SEL_RT, RU_EN_RT, RU_HI_RS_REG,
    SEL_ALU,
    EN_IR, EN_PC_0, EN_MDR, RAM_LD;

<0xa8>
@InstALURegisterHiLoTransfer:
    RU_SEL_RS, RU_SEL_RT, RU_EN_RT, RU_HI_RT_REG,
    SEL_ALU,
    EN_IR, EN_PC_0, EN_MDR, RAM_LD;

<0xac>
@InstALURegisterHiHiTransfer:
    RU_SEL_RS, RU_SEL_RT, RU_EN_RT, RU_HI_RS_REG, RU_HI_RT_REG,
    SEL_ALU, EN_IR, EN_PC_0, EN_MDR, RAM_LD;



//
//  Data Loading Instructions
//
<0xb0>
@InstLoadImm16:
    INST_FORM_0_SRC, EN_INST_FORM_0, EN_PC_0,
    RU_SRC, RU_EN_RT, EN_MC_DEC, RAM_LD, branch(@Fetch, 0);



<0xc0>
@InstJumpDirect:
    INST_FORM_0_SRC, EN_INST_FORM_0, EN_PC_0, RAM_LD,
    PC_0_SRC, SEL_ALU, ALU_SRC_B_0, EN_MC_DEC, branch(@Fetch, 0);