
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "VALUE_ID LABEL_ID SIGNAL_ID NUMBER_DEC NUMBER_HEX root : statement  root : root statement  statement : LABEL_ID ':'  statement : signal_expr ';'  statement : VALUE_ID ':' signal_expr ';'  statement : '<' number '>'  signal_expr : signal  signal_expr : signal_expr ',' signal  signal : SIGNAL_ID '(' destination ',' destination ')'  signal : SIGNAL_ID  destination : LABEL_ID destination : number\n    number : NUMBER_HEX\n           | NUMBER_DEC\n    "
    
_lr_action_items = {'LABEL_ID':([0,1,2,9,10,11,17,20,24,25,],[3,3,-1,-2,-3,-4,22,-6,-5,22,]),'VALUE_ID':([0,1,2,9,10,11,20,24,],[5,5,-1,-2,-3,-4,-6,-5,]),'<':([0,1,2,9,10,11,20,24,],[6,6,-1,-2,-3,-4,-6,-5,]),'SIGNAL_ID':([0,1,2,9,10,11,12,13,20,24,],[8,8,-1,-2,-3,-4,8,8,-6,-5,]),'$end':([1,2,9,10,11,20,24,],[0,-1,-2,-3,-4,-6,-5,]),':':([3,5,],[10,13,]),';':([4,7,8,18,19,27,],[11,-7,-10,-8,24,-9,]),',':([4,7,8,15,16,18,19,21,22,23,27,],[12,-7,-10,-13,-14,-8,12,25,-11,-12,-9,]),'NUMBER_HEX':([6,17,25,],[15,15,15,]),'NUMBER_DEC':([6,17,25,],[16,16,16,]),'(':([8,],[17,]),'>':([14,15,16,],[20,-13,-14,]),')':([15,16,22,23,26,],[-13,-14,-11,-12,27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'root':([0,],[1,]),'statement':([0,1,],[2,9,]),'signal_expr':([0,1,13,],[4,4,19,]),'signal':([0,1,12,13,],[7,7,18,7,]),'number':([6,17,25,],[14,23,23,]),'destination':([17,25,],[21,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> root","S'",1,None,None,None),
  ('root -> statement','root',1,'p_root','parser.py',10),
  ('root -> root statement','root',2,'p_compound_program','parser.py',17),
  ('statement -> LABEL_ID :','statement',2,'p_label_statement','parser.py',26),
  ('statement -> signal_expr ;','statement',2,'p_expr_statement','parser.py',31),
  ('statement -> VALUE_ID : signal_expr ;','statement',4,'p_value_statement','parser.py',36),
  ('statement -> < number >','statement',3,'p_address_literal_statement','parser.py',40),
  ('signal_expr -> signal','signal_expr',1,'p_signal_expr','parser.py',49),
  ('signal_expr -> signal_expr , signal','signal_expr',3,'p_compound_signal_expr','parser.py',55),
  ('signal -> SIGNAL_ID ( destination , destination )','signal',6,'p_signal_branch','parser.py',64),
  ('signal -> SIGNAL_ID','signal',1,'p_signal_signal_id','parser.py',69),
  ('destination -> LABEL_ID','destination',1,'p_destination_label','parser.py',78),
  ('destination -> number','destination',1,'p_destination_number','parser.py',82),
  ('number -> NUMBER_HEX','number',1,'p_number','parser.py',91),
  ('number -> NUMBER_DEC','number',1,'p_number','parser.py',92),
]
